@page "/messages"
@using CodeWash.MessageExchange.Client.Services
@using CodeWash.MessageExchange.Dtos.QueryDtos
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using Microsoft.AspNetCore.SignalR.Client
@inject Services.UserService UserService
@inject Services.MessageService MessageService
@inject AuthenticationStateProvider AuthProvider

<MudGrid>
    <!-- Left Panel: User List -->
    <MudItem xs="12" sm="3" md="3" lg="2">
        <MudPaper Elevation="4" Class="pa-2" Style="height: 100vh; overflow-y: auto;">
            <MudText Typo="Typo.h6" Class="mb-2">Users</MudText>
            <MudList T="GetUsersExceptCurrentVM">
                @foreach (var user in _users)
                {
                    <MudListItem Class="user-list-item" @onclick="() => SelectUser(user)">
                        <MudText>@user.Email</MudText>
                    </MudListItem>
                }
            </MudList>
        </MudPaper>
    </MudItem>

    <!-- Right Panel: Chat Area -->
    <MudItem xs="12" sm="9" md="9" lg="10">
        <MudPaper Elevation="4" Class="pa-4">
            @if (_selectedRecipient != null)
            {
                <MudText Typo="Typo.h6">Chat with @_selectedRecipient.Email</MudText>
                <MudDivider Class="mb-3" />

                <!-- Message Input -->
                <MudTextField @bind-Value="_newMessage" Label="Type a message..." Adornment="Adornment.End" />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SendMessage">
                    @(_messageIsSending ? "Sending..." : "Send")
                </MudButton>

                <!-- Messages List -->
                <MudList T="GetMessagesBetweenUsersVM" Style="height: 400px; overflow-y: auto;">
                    @if (_messagesIsLoading)
                    {
                        <MudListItem Class="message-item">
                            <MudText>(Loading messages...)</MudText>
                        </MudListItem>
                    }
                    else
                    {
                        foreach (var message in _messages)
                        {
                            <MudListItem Class="@GetMessageClass(message.SenderEmail)">
                                <MudText>@message.Content</MudText>
                                <MudText Typo="Typo.caption" Class="text-muted timestamp">
                                    @message.Timestamp.ToString("yyyy-MM-dd HH:mm:ss")
                                </MudText>
                            </MudListItem>
                        }
                    }
                </MudList>
            }
            else
            {
                <MudText Typo="Typo.subtitle1" Class="text-center">Select a user to start chatting</MudText>
            }
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private List<GetUsersExceptCurrentVM> _users = [];
    private GetUsersExceptCurrentVM? _selectedRecipient;
    private string _newMessage = string.Empty;
    private List<GetMessagesBetweenUsersVM> _messages = [];
    private bool _messagesIsLoading = false;
    private bool _messageIsSending = false;
    private string _currentUserEmail = string.Empty;
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        _currentUserEmail = authState.User.FindFirst(ClaimTypes.Email)?.Value ?? string.Empty;

        _users = await UserService.GetUsersExceptCurrentAsync();

        // await MessageService.StartConnectionAsync();
        // MessageService.OnMessageReceived += HandleIncomingMessage;

        if (hubConnection is null)
        {
            var token = await ((CustomAuthStateProvider)AuthProvider).GetTokenAsync();
            
            hubConnection = new HubConnectionBuilder()
                .WithUrl($"https://localhost:7216/messageHub", options =>
                {
                    options.AccessTokenProvider = () => Task.FromResult(token);
                })
                .WithAutomaticReconnect()
                .Build();

            hubConnection.On<string, string, string>("ReceiveMessage", HandleIncomingMessage);
        }

        if (hubConnection.State == HubConnectionState.Disconnected)
        {
            Console.WriteLine("Starting SignalR connection...");
            await hubConnection.StartAsync();
            Console.WriteLine("SignalR Connected!");
        }
    }

    private void HandleIncomingMessage(string senderEmail, string message, string timestamp)
    {
        Console.WriteLine($"[SignalR] Received message from {senderEmail}: {message} at {timestamp}");
        
        if (_selectedRecipient != null && _selectedRecipient.Email == senderEmail)
        {
            bool isParsed = DateTime.TryParse(timestamp, out DateTime parsedTimestamp);
            _messages.Add(new GetMessagesBetweenUsersVM(message, isParsed ? parsedTimestamp : DateTime.UtcNow, senderEmail));
            StateHasChanged();
        }
    }

    private async Task SelectUser(GetUsersExceptCurrentVM user)
    {
        _selectedRecipient = user;
        await LoadMessagesForSelectedUser();
    }

    private async Task SendMessage()
    {
        _messageIsSending = true;

        try
        {
            if (!string.IsNullOrEmpty(_newMessage) && _selectedRecipient != null)
            {
                await MessageService.SendMessageAsync(_selectedRecipient.Email, _newMessage);
                _newMessage = string.Empty;
                await LoadMessagesForSelectedUser();
            }
        }
        finally
        {
            _messageIsSending = false;
        }
    }

    private async Task LoadMessagesForSelectedUser()
    {
        _messagesIsLoading = true;

        try
        {
            _messages.Clear();
            _messages = await MessageService.GetMessagesBetweenUsersAsync(_selectedRecipient!.Email);
        }
        finally
        {
            _messagesIsLoading = false;
        }
    }

    private string GetMessageClass(string senderEmail)
    {
        return "message-item " +
            (senderEmail == _currentUserEmail ? "sent-message" : "received-message");
    }
}

    <style>
    .message-item {
        max-width: 60%;
        padding: 10px;
        border-radius: 10px;
        margin: 5px;
        word-wrap: break-word;
    }

    .sent-message {
        background-color: #d4f8c6;
        align-self: flex-end;
        float: right;
        text-align: left;
    }

    .received-message {
        background-color: #ffffff;
        border: 1px solid #ccc;
        align-self: flex-start;
        float: left;
        text-align: left;
    }
    </style>
